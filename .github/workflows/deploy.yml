# Simple workflow for deploying static content to GitHub Pages
name: Deploy dev build on main push

on:
    # Runs on pushes targeting the default branch
    push:
        branches: [main]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: "pages"
    cancel-in-progress: false

jobs:
    # Single deploy job since we're just deploying
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - uses: actions/setup-python@v5
              name: Install Python
              with:
                  python-version: '3.10'
            - id: get-repo-values
              name: Get repository name
              run: |
                  url=https://$(echo "${{github.repository}}" | sed "s/\//.github.io\//")
                  echo "url=$url" >> $GITHUB_OUTPUT
            - name: Create dist directory
              run: |
                  mkdir dist
            - name: Build site
              run: |
                  : # Copy over all the students' files in the website directory
                  cp -r website/ dist/
                  : # Create a JS file to hold all their code
                  python tools/build.py
                  cp tools/build/website_files.js dist/
                  : # Copy over the index and 404 HTML pages
                  cp tools/index.html dist/index.html
                  cp tools/404.html dist/404.html
            - name: Install dependencies
              run: |
                  python -m pip install coverage drafter bakery pylint mypy
                  : # Install students' requirements.txt file if it is present
                  if [ -f website/requirements.txt ]; then
                      python -m pip install -r website/requirements.txt
                  fi    
            - name: Run tests and output code coverage
              run: |
                  python -m pip install coverage
                  echo "<html><body><pre>" > ./dist/tests.html
                  DRAFTER_SKIP=true coverage run website/main.py >> ./dist/tests.html
                  coverage html -d ./dist/coverage
                  echo "</pre></body></html>" >> ./dist/tests.html
            - name: Run linter
              run: |
                  echo "<html><body><pre>" > ./dist/lint.html
                  pylint website/*.py --exit-zero >> ./dist/lint.html
                  echo "</pre></body></html>" >> ./dist/lint.html
            - name: Run type checker
              continue-on-error: true
              run: |
                  echo "<html><body><pre>" > ./dist/type.html
                  mypy website/*.py >> ./dist/type.html
                  echo "</pre></body></html>" >> ./dist/lint.html
            - name: Create integrity report
              run: |
                  echo "<html><body><pre>" > ./dist/integrity.html
                  md5sum tools/404.html >> ./dist/integrity.html
                  md5sum tools/index.html >> ./dist/integrity.html
                  md5sum .github/workflows/deploy.yml >> ./dist/integrity.html
                  echo "</pre></body></html>" >> ./dist/integrity.html
            - name: Create GitHub redirect
              run: |
                  echo "<html><head><meta http-equiv='refresh' content='0; URL=${{github.server_url}}/${{github.repository}}' /></head><body>Redirecting to repository</body></html>" > ./dist/github.html
            - name: Create GitInspector Report
              run: |
                  git clone https://github.com/jpwhite3/gitinspector.git
                  python ./gitinspector/gitinspector.py ./ --grading --format=html -f tsx,ts,html,css -x ./gitinspector -x ./node_modules -x ./wbcore > ./dist/git.html
            - name: Copy over index.md to docs/
              run: |
                  cp readme.md docs/index.md
            - name: Generate HTML from Markdown for EGDD
              uses: ldeluigi/markdown-docs@latest
              with:
                  src: docs
                  dst: dist/docs/
            - name: Setup Pages
              uses: actions/configure-pages@v3
            - name: Upload artifact
              uses: actions/upload-pages-artifact@v2
              with:
                  # Upload entire repository
                  path: "dist/"
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v2
